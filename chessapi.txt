-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package chessapi
@version 0.1.0.0


-- | Bindings for Shiro's <a>chess bot tournament</a>
module Chess

-- | A bitboard - an integer where each of the 64 bits represents a square
--   of the board. The bits usually encode the presence of a particular
--   piece. The least significant bit corresponds to a1, the 8th least
--   significant bit corresponds to a8, the most significant bit
--   corresponds to h8.
type Bitboard = Word64

-- | A game of chess in a particular state.
data Board

-- | Directions, used for bitboard manipulation.
data Dir
N :: Dir
NE :: Dir
E :: Dir
SE :: Dir
S :: Dir
SW :: Dir
W :: Dir
NW :: Dir

-- | Chess piece types
data Piece
Pawn :: Piece
Bishop :: Piece
Knight :: Piece
Rook :: Piece
Queen :: Piece
King :: Piece

-- | Player colors
data PlayerColor
White :: PlayerColor
Black :: PlayerColor

-- | Game state.
data State

-- | The game is ongoing.
Normal :: State

-- | The game has ended in a stalemate.
Stalemate :: State

-- | The game has ended in a checkmate.
Checkmate :: State

-- | A chess move, specifying the positions but not the piece to be moved.
data Move
Move :: Bitboard -> Bitboard -> Maybe Piece -> Bool -> Bool -> Move

-- | The move's start position (a bitboard with a single set bit).
[from] :: Move -> Bitboard

-- | The move's end position (a bitboard with a single set bit).
[to] :: Move -> Bitboard

-- | If this move causes a pawn promotion, specifies the piece to promote
--   it to.
[promotion] :: Move -> Maybe Piece

-- | Whether this move is a capture.
[capture] :: Move -> Bool

-- | Whether this move is a castle.
[castle] :: Move -> Bool

-- | A default <a>Move</a> with all of the fields unset.
moveDefault :: Move

-- | Get the game's current board. The current board changes after every
--   move.
getBoard :: IO Board

-- | Submit a move that you are going to play.
submitMove :: Move -> IO ()

-- | Get the time that was remaining at the start of the turn in
--   milliseconds.
getTimeMillis :: IO Int

-- | Get opponent's remaining time in milliseconds.
getOpponentTimeMillis :: IO Int

-- | Get time elapsed since the start of the turn in milliseconds.
getElapsedTimeMillis :: IO Int

-- | List legal moves for a board. Note that it may be either your or your
--   opponent's moves depending on what <a>nextTurnColor</a> returns.
legalMoves :: Board -> [Move]

-- | Returns the player whose turn it currently is.
nextTurnColor :: Board -> PlayerColor

-- | Whether it's white's turn.
isWhiteTurn :: Board -> Bool

-- | Whether it's black's turn.
isBlackTurn :: Board -> Bool

-- | Skips a player's turn, returning an equivalent board where it's the
--   opposite player's turn.
skipTurn :: Board -> Board

-- | Get a game's current state (whether it's a checkmate, stalemate, or
--   neither).
gameState :: Board -> State

-- | Whether the current player is in check.
inCheck :: Board -> Bool

-- | Whether the current player is in checkmate.
inCheckmate :: Board -> Bool

-- | Whether the current player is in a draw.
inDraw :: Board -> Bool

-- | Whether a particular player is allowed to castle kingside at some
--   point in the game.
canCastleKingside :: PlayerColor -> Board -> Bool

-- | Whether a particular player is allowed to castle queenside at some
--   point in the game.
canCastleQueenside :: PlayerColor -> Board -> Bool

-- | Get a board's Zobrist hash.
zobristKey :: Board -> Int

-- | Make a move on a board, returning a new board with that move made.
pushMove :: Move -> Board -> Board

-- | Undo a move on a board, returning a board without that move.
popMove :: Board -> Board

-- | Get a bitboard for a particular player and piece. The bitboard's bits
--   will indicate the presence of that particular piece of that particular
--   color on each square of the board.
bitboard :: PlayerColor -> Piece -> Board -> Bitboard

-- | Get the piece located at a particular index.
pieceFromIndex :: Int -> Board -> Maybe Piece

-- | Get the piece located at the position set in the bitboard.
pieceFromBitboard :: Bitboard -> Board -> Maybe Piece

-- | Get the player color for the piece located at a particular index.
colorFromIndex :: Int -> Board -> Maybe PlayerColor

-- | Get the player color for the piece located at the position set in the
--   bitboard.
colorFromBitboard :: Bitboard -> Board -> Maybe PlayerColor

-- | Convert a bitboard with a single set bit to a cell index.
indexFromBitboard :: Bitboard -> Int

-- | Convert a cell index to a bitboard with a single set bit.
bitboardFromIndex :: Int -> Bitboard

-- | Get a printable string for a bitboard (a grid with 8 columns and 8
--   lines)
showBitboard :: Bitboard -> String

-- | Move all elements of the bitboard in a particular direction.
bbSlide :: Dir -> Bitboard -> Bitboard

-- | Travel in a particular direction, setting all bits until encountering
--   a nonempty space, returning all marked spaces.
bbFlood :: Bool -> Dir -> Bitboard -> Bitboard -> Bitboard

-- | Travel in a particular direction until encountering a nonempty space.
bbBlocker :: Dir -> Bitboard -> Bitboard -> Bitboard
bbSlideN :: Bitboard -> Bitboard
bbSlideS :: Bitboard -> Bitboard
bbSlideE :: Bitboard -> Bitboard
bbSlideW :: Bitboard -> Bitboard
bbSlideNE :: Bitboard -> Bitboard
bbSlideNW :: Bitboard -> Bitboard
bbSlideSE :: Bitboard -> Bitboard
bbSlideSW :: Bitboard -> Bitboard
bbFloodN :: Bool -> Bitboard -> Bitboard -> Bitboard
bbFloodS :: Bool -> Bitboard -> Bitboard -> Bitboard
bbFloodE :: Bool -> Bitboard -> Bitboard -> Bitboard
bbFloodW :: Bool -> Bitboard -> Bitboard -> Bitboard
bbFloodNE :: Bool -> Bitboard -> Bitboard -> Bitboard
bbFloodNW :: Bool -> Bitboard -> Bitboard -> Bitboard
bbFloodSE :: Bool -> Bitboard -> Bitboard -> Bitboard
bbFloodSW :: Bool -> Bitboard -> Bitboard -> Bitboard
bbBlockerN :: Bitboard -> Bitboard -> Bitboard
bbBlockerS :: Bitboard -> Bitboard -> Bitboard
bbBlockerE :: Bitboard -> Bitboard -> Bitboard
bbBlockerW :: Bitboard -> Bitboard -> Bitboard
bbBlockerNE :: Bitboard -> Bitboard -> Bitboard
bbBlockerNW :: Bitboard -> Bitboard -> Bitboard
bbBlockerSE :: Bitboard -> Bitboard -> Bitboard
bbBlockerSW :: Bitboard -> Bitboard -> Bitboard
instance GHC.Internal.Enum.Bounded Chess.Dir
instance GHC.Internal.Enum.Bounded Chess.Piece
instance GHC.Internal.Enum.Bounded Chess.PlayerColor
instance GHC.Internal.Enum.Bounded Chess.State
instance GHC.Internal.Enum.Enum Chess.Dir
instance GHC.Internal.Enum.Enum Chess.Piece
instance GHC.Internal.Enum.Enum Chess.PlayerColor
instance GHC.Internal.Enum.Enum Chess.State
instance GHC.Classes.Eq Chess.Dir
instance GHC.Classes.Eq Chess.Move
instance GHC.Classes.Eq Chess.Piece
instance GHC.Classes.Eq Chess.PlayerColor
instance GHC.Classes.Eq Chess.State
instance GHC.Classes.Ord Chess.Piece
instance GHC.Classes.Ord Chess.PlayerColor
instance GHC.Classes.Ord Chess.State
instance GHC.Internal.Show.Show Chess.Dir
instance GHC.Internal.Show.Show Chess.Move
instance GHC.Internal.Show.Show Chess.Piece
instance GHC.Internal.Show.Show Chess.PlayerColor
instance GHC.Internal.Show.Show Chess.State
